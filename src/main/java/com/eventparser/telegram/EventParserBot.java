package com.eventparser.telegram;

import com.eventparser.model.Event;
import com.eventparser.repository.EventRepository;
import com.eventparser.scheduler.EventParsingScheduler;
import com.eventparser.service.EventService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Telegram bot for sending messages to event organizers and tracking responses.
 * 
 * Telegram-–±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤.
 */
@Slf4j // –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è Lombok –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞
@Component // –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è Spring, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è, —á—Ç–æ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
public class EventParserBot extends TelegramLongPollingBot { // –ù–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç TelegramLongPollingBot –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞

    private final String botUsername; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
    private final String botToken; // –¢–æ–∫–µ–Ω –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
    private final EventRepository eventRepository; // –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏

    // –ö–∞—Ä—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫–∞–∫–æ–π —á–∞—Ç —Å–≤—è–∑–∞–Ω —Å –∫–∞–∫–∏–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
    private final Map<String, Long> chatToEventMap = new ConcurrentHashMap<>();

    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
    private final Map<String, Long> pendingMessages = new ConcurrentHashMap<>();

    private final EventService eventService;

    private final EventParsingScheduler eventParsingScheduler;

    private final String webInterfaceUrl;

    // –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    private static final String COMMAND_START = "/start";
    private static final String COMMAND_HELP = "/help";
    private static final String COMMAND_STATS = "/stats";
    private static final String COMMAND_UPCOMING = "/upcoming";
    private static final String COMMAND_AWAITING = "/awaiting";
    private static final String COMMAND_REFRESH = "/refresh";
    private static final String COMMAND_CLEAR = "/clear";

    // –ü—É–Ω–∫—Ç—ã –º–µ–Ω—é
    private static final String MENU_STATS = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞";
    private static final String MENU_UPCOMING = "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è";
    private static final String MENU_AWAITING = "‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞";
    private static final String MENU_HELP = "‚ùì –ü–æ–º–æ—â—å";
    private static final String MENU_REFRESH = "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ";
    private static final String MENU_CLEAR = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö";

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    public EventParserBot(
            @Value("${telegram.bot.token}") String botToken, // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ application.properties
            @Value("${telegram.bot.username}") String botUsername, // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ application.properties
            @Value("${app.web-interface.url}") String webInterfaceUrl, // –ü–æ–ª—É—á–∞–µ–º URL –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑ application.properties
            EventRepository eventRepository,
            EventService eventService,
            EventParsingScheduler eventParsingScheduler) {
        this.botToken = botToken;
        this.botUsername = botUsername;
        this.webInterfaceUrl = webInterfaceUrl;
        this.eventRepository = eventRepository;
        this.eventService = eventService;
        this.eventParsingScheduler = eventParsingScheduler;
    }

    @Override
    public String getBotUsername() {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        return botUsername;
    }

    @Override
    public String getBotToken() {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        // –ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API
        if (update.hasMessage() && update.getMessage().hasText()) {
            // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            processIncomingMessage(update.getMessage());
        }
    }

    /**
     * Process an incoming message from a user.
     *
     * @param message The message received
     * 
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param message –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private void processIncomingMessage(Message message) {
        String chatId = message.getChatId().toString(); // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
        String username = message.getFrom().getUserName(); // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        String text = message.getText(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        log.info("Received message from {}: {}", username, text); // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
        if (text.startsWith("/")) {
            handleCommand(chatId, text);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–æ–º –º–µ–Ω—é
        if (text.equals(MENU_STATS)) {
            sendStatistics(chatId);
            return;
        } else if (text.equals(MENU_UPCOMING)) {
            sendUpcomingEvents(chatId);
            return;
        } else if (text.equals(MENU_AWAITING)) {
            sendAwaitingEvents(chatId);
            return;
        } else if (text.equals(MENU_HELP)) {
            sendHelpMessage(chatId);
            return;
        } else if (text.equals(MENU_REFRESH)) {
            sendRefreshData(chatId);
            return;
        } else if (text.equals(MENU_CLEAR)) {
            sendClearDatabase(chatId);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç —Å –∫–∞–∫–∏–º-–ª–∏–±–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
        if (chatToEventMap.containsKey(chatId)) {
            // –ï—Å–ª–∏ —á–∞—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            Long eventId = chatToEventMap.get(chatId);
            handleEventResponse(eventId, text);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω
            sendTelegramMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.", createMainMenu());
        } else if (username != null && pendingMessages.containsKey(username)) {
            // –≠—Ç–æ –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            Long eventId = pendingMessages.get(username);
            chatToEventMap.put(chatId, eventId); // –°–≤—è–∑—ã–≤–∞–µ–º —á–∞—Ç —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
            pendingMessages.remove(username); // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sendTelegramMessage(chatId, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ.", createMainMenu());

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            handleEventResponse(eventId, text);
        } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/—á–∞—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            sendWelcomeMessage(chatId);
        }
    }

    /**
     * Handle a command from a user.
     *
     * @param chatId The chat ID
     * @param command The command text
     * 
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     *
     * @param chatId ID —á–∞—Ç–∞
     * @param command –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
     */
    private void handleCommand(String chatId, String command) {
        switch (command) {
            case COMMAND_START:
                sendWelcomeMessage(chatId);
                break;
            case COMMAND_HELP:
                sendHelpMessage(chatId);
                break;
            case COMMAND_STATS:
                sendStatistics(chatId);
                break;
            case COMMAND_UPCOMING:
                sendUpcomingEvents(chatId);
                break;
            case COMMAND_AWAITING:
                sendAwaitingEvents(chatId);
                break;
            case COMMAND_REFRESH:
                sendRefreshData(chatId);
                break;
            case COMMAND_CLEAR:
                sendClearDatabase(chatId);
                break;
            default:
                sendTelegramMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", createMainMenu());
                break;
        }
    }

    /**
     * Send a welcome message to a user.
     *
     * @param chatId The chat ID
     * 
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     *
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendWelcomeMessage(String chatId) {
        StringBuilder message = new StringBuilder();
        message.append("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Event Parser Bot!\n\n");
        message.append("–Ø –ø–æ–º–æ–≥–∞—é —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.\n\n");
        message.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π:\n");
        message.append("- /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n");
        message.append("- /upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n");
        message.append("- /awaiting - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞\n");
        message.append("- /refresh - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n");
        message.append("- /clear - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n");
        message.append("- /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n");
        message.append("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ").append(webInterfaceUrl).append("\n\n");
        message.append("–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?");

        sendTelegramMessage(chatId, message.toString(), createMainMenu());
    }

    /**
     * Send a help message to a user.
     *
     * @param chatId The chat ID
     * 
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     *
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendHelpMessage(String chatId) {
        StringBuilder message = new StringBuilder();
        message.append("üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Event Parser Bot\n\n");
        message.append("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n");
        message.append("- /start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n");
        message.append("- /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n");
        message.append("- /upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n");
        message.append("- /awaiting - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞\n");
        message.append("- /refresh - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n");
        message.append("- /clear - –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n");
        message.append("- /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n");
        message.append("–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n\n");
        message.append("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:\n").append(webInterfaceUrl);

        sendTelegramMessage(chatId, message.toString(), createMainMenu());
    }

    /**
     * Send statistics about events to a user.
     *
     * @param chatId The chat ID
     * 
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     *
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendStatistics(String chatId) {
        int totalEvents = eventService.getAllEvents().size();
        int upcomingEvents = eventService.getUpcomingEvents().size();
        int eventsWithoutMessages = eventService.getEventsWithoutMessages().size();
        int eventsAwaitingResponse = eventService.getEventsAwaitingResponse().size();

        StringBuilder message = new StringBuilder();
        message.append("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\n");
        message.append("üìå –í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ").append(totalEvents).append("\n");
        message.append("üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ").append(upcomingEvents).append("\n");
        message.append("üì© –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ").append(eventsWithoutMessages).append("\n");
        message.append("‚è≥ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞: ").append(eventsAwaitingResponse).append("\n\n");
        message.append("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: ").append(LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"))).append("\n\n");
        message.append("üåê –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n").append(webInterfaceUrl).append("/parser");

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ã—á–Ω–æ –Ω–µ –±—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∏—Å–ø–æ–ª—å–∑—É–µ–º
        // –º–µ—Ç–æ–¥ sendTelegramMessage, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        sendTelegramMessage(chatId, message.toString(), createMainMenu());
    }

    /**
     * Send a list of upcoming events to a user.
     *
     * @param chatId The chat ID
     * 
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     *
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendUpcomingEvents(String chatId) {
        List<Event> upcomingEvents = eventService.getUpcomingEvents();

        if (upcomingEvents.isEmpty()) {
            sendTelegramMessage(chatId, "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", createMainMenu());
            return;
        }

        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        final int MAX_EVENTS_PER_MESSAGE = 5;

        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        int totalEvents = upcomingEvents.size();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–æ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        StringBuilder message = new StringBuilder();
        message.append("üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (").append(totalEvents).append(")\n\n");

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ MAX_EVENTS_PER_MESSAGE –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        int firstMessageCount = Math.min(totalEvents, MAX_EVENTS_PER_MESSAGE);
        appendEventsToMessage(message, upcomingEvents, 0, firstMessageCount, formatter);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —É–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ
        if (totalEvents > MAX_EVENTS_PER_MESSAGE) {
            message.append("... –∏ –µ—â–µ ").append(totalEvents - MAX_EVENTS_PER_MESSAGE).append(" –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n");
        } else {
            message.append("\n");
        }

        message.append("üåê –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ:\n").append(webInterfaceUrl).append("/");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        sendTelegramMessage(chatId, message.toString(), createMainMenu());

        // –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if (totalEvents > MAX_EVENTS_PER_MESSAGE) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
            for (int offset = MAX_EVENTS_PER_MESSAGE; offset < totalEvents; offset += MAX_EVENTS_PER_MESSAGE) {
                StringBuilder additionalMessage = new StringBuilder();
                additionalMessage.append("üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)\n\n");

                int batchSize = Math.min(MAX_EVENTS_PER_MESSAGE, totalEvents - offset);
                appendEventsToMessage(additionalMessage, upcomingEvents, offset, batchSize, formatter);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–Ω—é
                sendTelegramMessage(chatId, additionalMessage.toString(), null);
            }
        }
    }

    /**
     * Helper method to append event information to a message.
     *
     * @param message The StringBuilder to append to
     * @param events The list of events
     * @param offset The starting index
     * @param count The number of events to append
     * @param formatter The date formatter
     */
    private void appendEventsToMessage(StringBuilder message, List<Event> events, int offset, int count, DateTimeFormatter formatter) {
        for (int i = 0; i < count; i++) {
            Event event = events.get(offset + i);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            String name = truncateString(event.getName(), 50);
            String location = truncateString(event.getLocation(), 50);

            message.append(offset + i + 1).append(". ").append(name).append("\n");
            message.append("   üìç ").append(location).append("\n");
            message.append("   üïí ").append(event.getDate().format(formatter)).append("\n");
            if (event.getPrice() != null) {
                message.append("   üí∞ ").append(event.getPrice()).append(" —Ä—É–±.\n");
            }
            message.append("\n");
        }
    }

    /**
     * Helper method to truncate a string to a maximum length.
     *
     * @param str The string to truncate
     * @param maxLength The maximum length
     * @return The truncated string
     */
    private String truncateString(String str, int maxLength) {
        if (str == null) {
            return "";
        }
        if (str.length() <= maxLength) {
            return str;
        }
        return str.substring(0, maxLength - 3) + "...";
    }

    /**
     * Send a list of events awaiting response to a user.
     *
     * @param chatId The chat ID
     * 
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     *
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendAwaitingEvents(String chatId) {
        List<Event> awaitingEvents = eventService.getEventsAwaitingResponse();

        if (awaitingEvents.isEmpty()) {
            sendTelegramMessage(chatId, "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞.", createMainMenu());
            return;
        }

        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        final int MAX_EVENTS_PER_MESSAGE = 5;

        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        int totalEvents = awaitingEvents.size();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–æ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        StringBuilder message = new StringBuilder();
        message.append("‚è≥ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞ (").append(totalEvents).append(")\n\n");

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ MAX_EVENTS_PER_MESSAGE –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        int firstMessageCount = Math.min(totalEvents, MAX_EVENTS_PER_MESSAGE);
        appendAwaitingEventsToMessage(message, awaitingEvents, 0, firstMessageCount, formatter);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —É–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ
        if (totalEvents > MAX_EVENTS_PER_MESSAGE) {
            message.append("... –∏ –µ—â–µ ").append(totalEvents - MAX_EVENTS_PER_MESSAGE).append(" –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n");
        } else {
            message.append("\n");
        }

        message.append("üåê –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–∞, –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ:\n").append(webInterfaceUrl).append("/events/awaiting-response");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        sendTelegramMessage(chatId, message.toString(), createMainMenu());

        // –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if (totalEvents > MAX_EVENTS_PER_MESSAGE) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
            for (int offset = MAX_EVENTS_PER_MESSAGE; offset < totalEvents; offset += MAX_EVENTS_PER_MESSAGE) {
                StringBuilder additionalMessage = new StringBuilder();
                additionalMessage.append("‚è≥ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ–∂–∏–¥–∞—é—â–∏–µ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)\n\n");

                int batchSize = Math.min(MAX_EVENTS_PER_MESSAGE, totalEvents - offset);
                appendAwaitingEventsToMessage(additionalMessage, awaitingEvents, offset, batchSize, formatter);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–Ω—é
                sendTelegramMessage(chatId, additionalMessage.toString(), null);
            }
        }
    }

    /**
     * Helper method to append awaiting event information to a message.
     *
     * @param message The StringBuilder to append to
     * @param events The list of events
     * @param offset The starting index
     * @param count The number of events to append
     * @param formatter The date formatter
     */
    private void appendAwaitingEventsToMessage(StringBuilder message, List<Event> events, int offset, int count, DateTimeFormatter formatter) {
        for (int i = 0; i < count; i++) {
            Event event = events.get(offset + i);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è, –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            String name = truncateString(event.getName(), 50);
            String location = truncateString(event.getLocation(), 50);
            String contact = truncateString(event.getOrganizerContact(), 30);

            message.append(offset + i + 1).append(". ").append(name).append("\n");
            message.append("   üìç ").append(location).append("\n");
            message.append("   üïí ").append(event.getDate().format(formatter)).append("\n");
            message.append("   ‚úâÔ∏è ").append(contact).append("\n");
            message.append("\n");
        }
    }

    /**
     * Refresh data by triggering the parsing process and send a confirmation message.
     *
     * @param chatId The chat ID
     * 
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—É—Å–∫–∞—è –ø—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     *
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendRefreshData(String chatId) {
        sendTelegramMessage(chatId, "üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...", null);

        List<String> sources = eventParsingScheduler.getParserSources();

        if (sources.isEmpty()) {
            sendTelegramMessage(chatId, "‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ parser.sources –≤ application.properties.", createMainMenu());
            return;
        }

        int parsedCount = eventParsingScheduler.parseEventsFromSources(sources);

        StringBuilder message = new StringBuilder();
        message.append("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n");
        message.append("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n");
        message.append("- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ").append(sources.size()).append("\n");
        message.append("- –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ").append(parsedCount).append("\n\n");
        message.append("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: ").append(LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"))).append("\n\n");
        message.append("üåê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n").append(webInterfaceUrl);

        sendTelegramMessage(chatId, message.toString(), createMainMenu());
    }

    /**
     * Clear all events from the database and send a confirmation message.
     *
     * @param chatId The chat ID
     * 
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
     *
     * @param chatId ID —á–∞—Ç–∞
     */
    private void sendClearDatabase(String chatId) {
        sendTelegramMessage(chatId, "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", null);

        int deletedCount = eventService.clearAllEvents();

        StringBuilder message = new StringBuilder();
        message.append("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!\n\n");
        message.append("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n");
        message.append("- –£–¥–∞–ª–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ").append(deletedCount).append("\n\n");
        message.append("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ").append(LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss"))).append("\n\n");
        message.append("üåê –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n").append(webInterfaceUrl);

        sendTelegramMessage(chatId, message.toString(), createMainMenu());
    }

    /**
     * Create a keyboard markup with the main menu buttons.
     *
     * @return The keyboard markup
     * 
     * –°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
     *
     * @return –†–∞–∑–º–µ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    private ReplyKeyboardMarkup createMainMenu() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setSelective(true);
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton(MENU_STATS));
        row1.add(new KeyboardButton(MENU_UPCOMING));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton(MENU_AWAITING));
        row2.add(new KeyboardButton(MENU_HELP));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton(MENU_REFRESH));
        row3.add(new KeyboardButton(MENU_CLEAR));

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);

        return keyboardMarkup;
    }

    /**
     * Handle a response for an event.
     *
     * @param eventId The ID of the event
     * @param responseText The response text
     * 
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.
     *
     * @param eventId ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     * @param responseText –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
     */
    private void handleEventResponse(Long eventId, String responseText) {
        Optional<Event> eventOpt = eventRepository.findById(eventId); // –ò—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ ID
        if (eventOpt.isPresent()) {
            Event event = eventOpt.get();
            event.setResponseReceived(true); // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç
            eventRepository.save(event); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            log.info("Received response for event {}: {}", eventId, responseText); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        } else {
            log.warn("Received response for unknown event ID: {}", eventId); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        }
    }

    /**
     * Send a message to a Telegram user.
     *
     * @param chatId The chat ID to send the message to
     * @param text The message text
     * @param replyKeyboardMarkup The keyboard markup to display (optional)
     * @return true if the message was sent successfully, false otherwise
     * 
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram.
     *
     * @param chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param replyKeyboardMarkup –†–∞–∑–º–µ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @return true, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
     */
    public boolean sendTelegramMessage(String chatId, String text, ReplyKeyboardMarkup replyKeyboardMarkup) {
        return sendTelegramMessageInternal(chatId, text, replyKeyboardMarkup, false);
    }

    /**
     * Internal method to send a Telegram message with recursion control.
     *
     * @param chatId The chat ID to send the message to
     * @param text The message text
     * @param replyKeyboardMarkup The keyboard markup to display (optional)
     * @param isRecursiveCall Flag to indicate if this is a recursive call
     * @return true if the message was sent successfully, false otherwise
     */
    private boolean sendTelegramMessageInternal(String chatId, String text, ReplyKeyboardMarkup replyKeyboardMarkup, boolean isRecursiveCall) {
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        final int MAX_MESSAGE_LENGTH = 4000; // –ò—Å–ø–æ–ª—å–∑—É–µ–º 4000 –≤–º–µ—Å—Ç–æ 4096 –¥–ª—è –∑–∞–ø–∞—Å–∞

        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—á–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ
        if (text.length() <= MAX_MESSAGE_LENGTH) {
            SendMessage message = new SendMessage(); // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message.setChatId(chatId); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —á–∞—Ç–∞
            message.setText(text); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

            if (replyKeyboardMarkup != null) {
                message.setReplyMarkup(replyKeyboardMarkup); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
            }

            try {
                execute(message); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                return true;
            } catch (TelegramApiException e) {
                log.error("Failed to send Telegram message to chat {}: {}", chatId, e.getMessage(), e); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                return false;
            }
        } else if (!isRecursiveCall) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
            log.info("Message is too long ({} characters), splitting into parts", text.length());

            // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            String[] lines = text.split("\n");
            StringBuilder currentPart = new StringBuilder();
            boolean success = true;

            for (String line : lines) {
                // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–∞–º–∞ –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–µ –Ω–∞ —á–∞—Å—Ç–∏
                if (line.length() > MAX_MESSAGE_LENGTH) {
                    // –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                    if (currentPart.length() > 0) {
                        success = success && sendTelegramMessageInternal(chatId, currentPart.toString(), null, true);
                        currentPart = new StringBuilder();
                    }

                    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
                    for (int i = 0; i < line.length(); i += MAX_MESSAGE_LENGTH) {
                        int endIndex = Math.min(i + MAX_MESSAGE_LENGTH, line.length());
                        String part = line.substring(i, endIndex);
                        success = success && sendTelegramMessageInternal(chatId, part, null, true);
                    }
                } 
                // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                else if (currentPart.length() + line.length() + 1 > MAX_MESSAGE_LENGTH) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏)
                    success = success && sendTelegramMessageInternal(chatId, currentPart.toString(), null, true);
                    currentPart = new StringBuilder();
                    currentPart.append(line).append("\n");
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
                    currentPart.append(line).append("\n");
                }
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            if (currentPart.length() > 0) {
                success = success && sendTelegramMessageInternal(chatId, currentPart.toString(), replyKeyboardMarkup, true);
            }

            return success;
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ,
            // –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
            log.warn("Message is still too long in recursive call, truncating to {} characters", MAX_MESSAGE_LENGTH);
            String truncatedText = text.substring(0, MAX_MESSAGE_LENGTH);
            return sendTelegramMessageInternal(chatId, truncatedText, replyKeyboardMarkup, true);
        }
    }

    /**
     * Send a message to a Telegram user without a keyboard.
     *
     * @param chatId The chat ID to send the message to
     * @param text The message text
     * @return true if the message was sent successfully, false otherwise
     * 
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
     *
     * @param chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @return true, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
     */
    public boolean sendTelegramMessage(String chatId, String text) {
        return sendTelegramMessage(chatId, text, null);
    }

    /**
     * Queue a message to be sent to a Telegram username.
     * The message will be sent when the user initiates a conversation with the bot.
     *
     * @param username The Telegram username
     * @param eventId The ID of the event
     * 
     * –°—Ç–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é Telegram.
     * –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –±–æ—Ç–æ–º.
     *
     * @param username –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
     * @param eventId ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
     */
    public void queueMessageForUsername(String username, Long eventId) {
        if (username != null && username.startsWith("@")) {
            // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª @ –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            username = username.substring(1);
        }

        pendingMessages.put(username, eventId); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç—É –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        log.info("Queued message for Telegram user @{} for event {}", username, eventId); // –õ–æ–≥–∏—Ä—É–µ–º
    }
}
